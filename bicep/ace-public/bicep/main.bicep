// ------------------
//    GENERAL PARAMETERS
// ------------------
@description('The location where the resources will be created.')
@allowed(['eastus', 'eastus2'])
param location string = 'eastus'

@description('Subscription ID of the resource.')
@maxLength(36)
@minLength(36)
param subscriptionId string

@description('The name of the existing resource group.')
param rgName string

// ------------------
//    MANAGED IDENTITY PARAMETERS
// ------------------
@description('Whether to use a managed identity.')
param useMIdentity bool

@description('The name of the user managed identity.')
param userIdentityName string

// ------------------
//    CONTAINER APPS PARAMETERS
// ------------------
@description('The name of the container apps environment. If set, it overrides the name generated by the template.')
param caeName string

@description('The SKU for the Container Apps environment.')
param caeSku object

@description('The CPU core count for the Azure Container App.')
param acaCpuCore string

@description('The memory size for the Azure Container App.')
param acaMemorySize string

@description('The name of the Azure Container Registry.')
param acrName string

@description('The SKU for the Azure Container Registry.')
param acrSku object

@description('The name of the Azure Container App.')
param acaName string

@description('IP restrictions for the Azure Container App.')
param acaIpRestrictions array

// ------------------
//    REDIS PARAMETERS
// ------------------
@description('Enable or disable Redis Server creation.')
param isRedis bool

@description('The name of the Redis cache instance.')
param redisName string

@description('The SKU for the Redis cache instance.')
param redisSku object

// ------------------
//    SQL DATABASE PARAMETERS
// ------------------
@description('Enable or disable SQL Server creation.')
param isSQL bool

@description('The name of the SQL Server.')
param sqlServerName string

@description('The name of the SQL Database.')
param sqlDbName string

@description('The SQL Server administrator username.')
@minLength(8)
param sqlAdminUser string

@description('The SQL Server administrator password.')
@secure()
@minLength(8)
param sqlAdminPassword string

@description('The location of the SQL Server.')
@allowed(['eastus', 'eastus2'])
param sqlLocation string = 'eastus2'

@description('The SKU for the SQL Database.')
param sqlDbSku object

@description('Additional properties for the SQL Database.')
param sqlDbProperties object

// ------------------
//    STATIC WEB APP PARAMETERS
// ------------------
@description('The name of the static web app.')
param staticWebAppName string

@description('The SKU for the static web app.')
@allowed(['Free', 'Standard'])
param staticWebSku string

@description('The location of the static web app.')
@allowed(['eastus', 'eastus2'])
param swaLocation string

// ------------------
//    MONITORING PARAMETERS (Log Analytics and App Insights)
// ------------------
@description('The name of the log analytics workspace. If set, it overrides the name generated by the template.')
param logAnalyticsWorkspaceName string

@description('The retention days for the log analytics workspace.')
@minValue(7)
@maxValue(365)
param logRetentionDays int = 30

@description('The name of the application insights. If set, it overrides the name generated by the template.')
param applicationInsightName string

param commonTags object

// ------------------
//    ENVIRONMENT PARAMETERS
// ------------------
@allowed(['dev', 'qa', 'stag', 'prod'])
param environment string

// Combine common tags with environment-specific tags
var tags = union(commonTags, { createdBy: 'bicep-${environment}' })

targetScope = 'resourceGroup'

// Define role definitions
var acrPullRole = subscriptionResourceId(
  'Microsoft.Authorization/roleDefinitions',
  '7f951dda-4ed3-4680-a7ca-43fe172d538d'
)
var sqlContributorRole = subscriptionResourceId(
  'Microsoft.Authorization/roleDefinitions',
  'b24988ac-6180-42a0-ab88-20f7382dd24c'
)
var redisContributorRole = subscriptionResourceId(
  'Microsoft.Authorization/roleDefinitions',
  'b24988ac-6180-42a0-ab88-20f7382dd24c'
)

// ------------------
//    MODULES DEPLOYMENT
// ------------------

// Managed Identities
resource uaiIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2022-01-31-preview' = {
  name: userIdentityName
  location: location
  tags: commonTags
}

// SQL Database Deployment
module sql 'modules/sql.bicep' = if (isSQL) {
  name: 'sqlDeployment'
  params: {
    location: sqlLocation
    sqlServerName: sqlServerName
    sqlDbName: sqlDbName
    sqlAdminUser: sqlAdminUser
    sqlAdminPassword: sqlAdminPassword
    sqlDbSku: sqlDbSku
    sqlDbProperties: sqlDbProperties
    commonTags: tags
    useMIdentity: useMIdentity
    roleDefinitionId: sqlContributorRole
    principalId: uaiIdentity.properties.principalId
  }
}

// Container Apps Environment Deployment
module containerAppEnv 'modules/containerAppEnv.bicep' = {
  name: 'containerAppEnvDeployment'
  params: {
    location: location
    caeName: caeName
    vnetSubnetId: ''
    commonTags: tags
    workspaceName: logAnalyticsWorkspaceName
    logRetentionDays: logRetentionDays
    caeSku: caeSku
    internalOnly: false
  }
}

// Application Insights Deployment
resource applicationInsights 'Microsoft.Insights/components@2020-02-02' = {
  name: applicationInsightName
  location: location
  tags: commonTags
  kind: 'web'
  properties: {
    Application_Type: 'web'
    WorkspaceResourceId: containerAppEnv.outputs.WorkspaceResourceId
  }
}

// Container App Deployment
module containerApp 'modules/containerApp.bicep' = {
  name: 'containerAppDeployment'
  params: {
    location: location
    acaName: acaName
    acrSku: acrSku
    containerAppEnvId: containerAppEnv.outputs.environmentId
    cpuCore: acaCpuCore
    memorySize: acaMemorySize
    acrName: acrName
    minReplica: 1
    maxReplica: 1
    sqlConnectionString: (isSQL)
      ? 'Server=tcp:${sql.outputs.sqlServerFqdn},1433;Database=${sqlDbName};User ID=${sqlAdminUser};Password=${sqlAdminPassword};Encrypt=true;Connection Timeout=30;'
      : ''
    redisHostName: (isRedis) ? redis.outputs.hostName : ''
    redisKey: (isRedis) ? redis.outputs.key : ''
    commonTags: tags
    rgName: rgName
    useMIdentity: useMIdentity
    uaiIdentityId: uaiIdentity.id
    roleDefinitionId: acrPullRole
    principalId: uaiIdentity.properties.principalId
    allowedIps: acaIpRestrictions
  }
}

// Redis Cache Deployment
module redis 'modules/redis.bicep' = {
  name: 'redisDeployment'
  params: {
    location: location
    redisName: redisName
    redisSku: redisSku
    commonTags: tags
    useMIdentity: useMIdentity
    roleDefinitionId: redisContributorRole
    principalId: uaiIdentity.properties.principalId
  }
}

// Static Web App Deployment
module staticWebApp 'modules/staticWebApp.bicep' = {
  name: 'staticWebAppDeployment'
  params: {
    location: swaLocation
    staticWebAppName: staticWebAppName
    staticWebSku: staticWebSku
    commonTags: tags
  }
}

// ------------------
//    OUTPUTS
// ------------------
output containerAppUrl string = containerApp.outputs.containerAppFQDN
output staticWebAppUrl string = staticWebApp.outputs.defaultHostname
