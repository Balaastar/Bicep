// General Parameters
@description('The location where the resources will be created.')
@allowed(['westus', 'westus2'])
param location string = 'westus'

@description('Subscription ID of the resource.')
@maxLength(36)
@minLength(36)
param subscriptionId string

@description('The name of the existing resource group.')
param rgName string

@description('The name for the Azure Container App infrastructure subnet.')
param acaInfraSubnetName string

@description('The name of the public IP.')
param pipName string

@description('The SKU of the public IP.')
param pipSku object

// ------------------
//    App Gateway PARAMETERS
// ------------------
@description('The name for the Azure App Gateway.')
param agwName string

@description('The sku for the Azure App Gateway.')
param agwSku object

@description('The name for the Azure App Gateway subnet.')
param agwSubnetName string

@description('The address space for the Azure App Gateway subnet.')
param agwSubnetAddressSpace string = '10.0.2.0/24'

@description('The name of the Web Application Firewall policy.')
param wafPolicyName string

@description('Flag to enable or disable WAF.')
param isWAF bool

// ------------------
//    CONTAINER APPS PARAMETERS
// ------------------
@description('The name of the container apps environment. If set, it overrides the name generated by the template.')
param caeName string

@description('The name of the Azure Container Registry.')
param acrName string

@description('The SKU of the Azure Container Registry.')
param acrSku object

@description('The name of the Azure Container App.')
param acaName string

@description('The name of the virtual network for infrastructure.')
param infraVNetName string

@description('The address space for the Container Apps environment.')
param caeAddressSpace string = '10.0.0.0/16'

@description('The address space for the Azure Container App subnet.')
param acaSubnetAddressSpace string = '10.0.1.0/24'

@description('The name for the SQL subnet.')
param sqlSubnetName string

@description('The address space for the SQL subnet.')
param sqlSubnetAddressSpace string = '10.0.4.0/24'

@description('The name for the Redis subnet.')
param redisSubnetName string

@description('The address space for the Redis subnet.')
param redisSubnetAddressSpace string = '10.0.3.0/24'

@description('Number of CPU cores the container can use. Can be with a maximum of two decimals.')
@allowed(['0.25', '0.5', '0.75', '1', '1.25', '1.5', '1.75', '2'])
param acaCpuCore string = '0.5'

@description('Amount of memory (in gibibytes, GiB) allocated to the container up to 4GiB. Can be with a maximum of two decimals.')
@allowed(['0.5', '1', '1.5', '2', '3', '3.5', '4'])
param acaMemorySize string = '1'

// ------------------
//    REDIS PARAMETERS
// ------------------
@description('Enable or Disable Redis cache instance creation.')
param isRedis bool

@description('The name of the Redis cache instance.')
param redisName string

@description('The SKU for the Redis cache instance.')
param redisSku object = {
  name: 'Basic'
  family: 'C'
  capacity: 1
}

// ------------------
//    SQL DATABASE PARAMETERS
// ------------------
@description('Enable or disable SQL creation.')
param isSQL bool

@description('The name of the SQL Server.')
param sqlServerName string

@description('The name of the SQL Database.')
param sqlDbName string

@description('The SQL Server administrator username.')
param sqlAdminUser string

@secure()
@description('SQL Server administrator password. Must meet Azure SQL password complexity requirements.')
@minLength(8)
@maxLength(128)
param sqlAdminPassword string

@description('The location of the SQL Server.')
@allowed(['westus', 'westus2'])
param sqlLocation string = 'westus2'

// ------------------
//    STATIC WEB APP PARAMETERS
// ------------------
@description('The name of the static web app.')
param staticWebAppName string

@description('The SKU for the static web app.')
@allowed(['Free', 'Standard'])
param staticWebSku string = 'Standard'

@description('The location of the static web app.')
@allowed(['westus', 'westus2'])
param swaLocation string = 'westus'

// ------------------
//    MONITORING PARAMETERS (Log Analytics and App Insights)
// ------------------
@description('The name of the Log Analytics workspace.')
param logAnalyticsWorkspaceName string

@description('The retention days for the Log Analytics workspace.')
@minValue(7)
@maxValue(365)
param logRetentionDays int = 30

@description('The name of the Application Insights resource.')
param applicationInsightName string

// ------------------
//    OTHER PARAMETERS
// ------------------
@description('The SKU for the Azure Container Apps environment.')
param caeSku object

@description('The SKU for the SQL Database.')
param sqlDbSku object

@description('SQL Database properties.')
param sqlDbProperties object = {
  collation: 'SQL_Latin1_General_CP1_CI_AS'
}

@description('Common tags applied to resources.')
param commonTags object

@description('IP restriction rules for Azure Container Apps.')
param acaIpRestrictions array

// ------------------
//    PRIVATE DNS PARAMETERS
// ------------------
@description('The name of the private DNS zone for SQL Database.')
param sqlPrivateDnsZoneName string

@description('The name of the private DNS zone for Redis.')
param redisPrivateDnsZoneName string

// ------------------
//    PRIVATE ENDPOINT PARAMETERS
// ------------------
@description('The name of the SQL Database private endpoint.')
param sqlPrivateEndpointName string = 'sql-private-endpoint'

@description('The name of the Redis private endpoint.')
param redisPrivateEndpointName string = 'redis-private-endpoint'

// ------------------
//    MANAGED IDENTITY PARAMETERS
// ------------------

param useMIdentity bool

@description('The name of the user managed identity.')
param userIdentityName string

// Environment Parameter
@description('Deployment environment (e.g., prod, dev).')
@allowed(['prod', 'qa', 'dev'])
param environment string = 'prod'

// Define common tags for different environments
var environmentTags = {
  prod: {
    purpose: 'production'
  }
  qa: {
    purpose: 'QA'
  }
  dev: {
    purpose: 'QA'
  }
}

// Combine common tags with environment-specific tags
var tags = union(commonTags, environmentTags[environment])

// Define role definitions
var acrPullRole = subscriptionResourceId(
  'Microsoft.Authorization/roleDefinitions',
  '7f951dda-4ed3-4680-a7ca-43fe172d538d'
)
var sqlContributorRole = subscriptionResourceId(
  'Microsoft.Authorization/roleDefinitions',
  'b24988ac-6180-42a0-ab88-20f7382dd24c'
)
var redisContributorRole = subscriptionResourceId(
  'Microsoft.Authorization/roleDefinitions',
  'b24988ac-6180-42a0-ab88-20f7382dd24c'
)

targetScope = 'resourceGroup'

// ------------------
//    MODULES DEPLOYMENT
// ------------------

// Virtual Network Deployment
module vnet 'modules/vnet.bicep' = {
  name: 'vnetDeployment'
  params: {
    location: location
    vnetName: infraVNetName
    addressSpace: caeAddressSpace
    acaSubnetAddressSpace: acaSubnetAddressSpace
    agwSubnetAddressSpace: agwSubnetAddressSpace
    sqlSubnetAddressSpace: sqlSubnetAddressSpace
    redisSubnetAddressSpace: redisSubnetAddressSpace
    acaInfraSubnetName: acaInfraSubnetName
    agwSubnetName: agwSubnetName
    sqlSubnetName: sqlSubnetName
    redisSubnetName: redisSubnetName
    commonTags: tags
  }
}

// Managed Identities
resource uaiIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2022-01-31-preview' = {
  name: userIdentityName
  location: location
  tags: commonTags
}

// // SQL Database Deployment
module sql 'modules/sql.bicep' = if (isSQL) {
  name: 'sqlDeployment'
  params: {
    location: sqlLocation
    sqlServerName: sqlServerName
    sqlDbName: sqlDbName
    sqlAdminUser: sqlAdminUser
    sqlAdminPassword: sqlAdminPassword
    sqlDbSku: sqlDbSku
    sqlDbProperties: sqlDbProperties
    commonTags: tags
    useMIdentity: useMIdentity
    roleDefinitionId: sqlContributorRole
    principalId: uaiIdentity.properties.principalId
  }
}

// // Redis Cache Deployment
module redis 'modules/redis.bicep' = if (isRedis) {
  name: 'redisDeployment'
  params: {
    location: location
    redisName: redisName
    redisSku: redisSku
    commonTags: tags
    useMIdentity: useMIdentity
    roleDefinitionId: redisContributorRole
    principalId: uaiIdentity.properties.principalId
  }
}

// Container Apps Environment Deployment
module containerAppEnv 'modules/containerAppEnv.bicep' = {
  name: 'containerAppEnvDeployment'
  params: {
    location: location
    caeName: caeName
    vnetSubnetId: vnet.outputs.acaInfraSubnetId
    commonTags: tags
    workspaceName: logAnalyticsWorkspaceName
    logRetentionDays: logRetentionDays
    caeSku: caeSku
    internalOnly: true
  }
}

// Application Insights Deployment
resource applicationInsights 'Microsoft.Insights/components@2020-02-02' = {
  name: applicationInsightName
  location: location
  tags: commonTags
  kind: 'web'
  properties: {
    Application_Type: 'web'
    WorkspaceResourceId: containerAppEnv.outputs.WorkspaceResourceId
  }
}

// Container App Deployment
module containerApp 'modules/containerApp.bicep' = {
  name: 'containerAppDeployment'
  params: {
    location: location
    acaName: acaName
    acrSku: acrSku
    containerAppEnvId: containerAppEnv.outputs.environmentId
    cpuCore: acaCpuCore
    memorySize: acaMemorySize
    acrName: acrName
    minReplica: 0
    maxReplica: 1
    sqlConnectionString: (isSQL)
      ? 'Server=tcp:${sql.outputs.sqlServerFqdn},1433;Database=${sqlDbName};User ID=${sqlAdminUser};Password=${sqlAdminPassword};Encrypt=true;Connection Timeout=30;'
      : ''
    redisHostName: (isRedis) ? redis.outputs.hostName : ''
    redisKey: (isRedis) ? redis.outputs.key : ''
    commonTags: tags
    allowedIps: acaIpRestrictions
    rgName: rgName
    useMIdentity: useMIdentity
    uaiIdentityId: uaiIdentity.id
    roleDefinitionId: acrPullRole
    principalId: uaiIdentity.properties.principalId
  }
  scope: resourceGroup(rgName)
}

// Get the zone name 
var ZONE_NAME = containerAppEnv.outputs.defaultDomain
var STATIC_IP = containerAppEnv.outputs.staticIp

// Private ACE DNS Zone and Links to Vnet 
module acePrivateZone 'modules/privateDnsZone.bicep' = {
  name: 'acePrivateZone-Zone-LinkDeployment'
  params: {
    zoneName: ZONE_NAME
    commonTags: commonTags
    vnetId: vnet.outputs.id
    staticIp: STATIC_IP
  }
  scope: resourceGroup(rgName)
}

// *** SQL Server Private Zone and Endpoint Deployment
module sqlPrivateZone 'modules/privateDnsZone.bicep' = if (isSQL) {
  name: '${sqlPrivateDnsZoneName}-Zone-LinkDeployment'
  params: {
    zoneName: sqlPrivateDnsZoneName
    commonTags: commonTags
    vnetId: vnet.outputs.id
    staticIp: ''
  }
}

module sqlPrivateEndpoint 'modules/privateEndpoint.bicep' = if (isSQL) {
  name: 'sqlPrivateEndpointDeployment'
  params: {
    location: location
    commonTags: tags
    privateEndpointName: sqlPrivateEndpointName
    subnetId: vnet.outputs.sqlSubnetId
    privateLinkName: 'sqlPrivateLink'
    privateLinkServiceId: sql.outputs.sqlServerId // resourceId('Microsoft.Sql/servers', sqlServerName)
    groupIds: ['sqlServer']
  }
}

// Reference the network interface associated with the private endpoint
module sqlNetworkInterface 'modules/networkInterfaceExisting.bicep' = if (isSQL) {
  name: 'sqlNetworkInterfaceDeployment'
  params: {
    privateEndpointNetworkInterfaceId: sqlPrivateEndpoint.outputs.privateEndpointNetworkInterfaceId
    rgName: rgName
  }
  scope: resourceGroup(rgName)
}

// SQL DNS Records
module sqlDnsRecord 'modules/privateDnsRecord.bicep' = if (isSQL) {
  name: 'sqlDnsRecordDeployment'
  params: {
    zoneName: sqlPrivateDnsZoneName
    staticIp: sqlNetworkInterface.outputs.privateIp
  }
  scope: resourceGroup(rgName)
}

// *** End of SQL Server Private Zone and Endpoint Deployment

// *** Redis Private Zone and Endpoint Deployment
module redisPrivateZone 'modules/privateDnsZone.bicep' = if (isRedis) {
  name: '${redisPrivateDnsZoneName}-Zone-LinkDeployment'
  params: {
    zoneName: redisPrivateDnsZoneName
    commonTags: commonTags
    vnetId: vnet.outputs.id
    staticIp: ''
  }
}
module redisPrivateEndpoint 'modules/privateEndpoint.bicep' = if (isRedis) {
  name: 'redisPrivateEndpointDeployment'
  params: {
    location: location
    commonTags: tags
    privateEndpointName: redisPrivateEndpointName
    subnetId: vnet.outputs.redisSubnetId
    privateLinkName: 'redisPrivateLink'
    privateLinkServiceId: redis.outputs.id // // resourceId('Microsoft.Cache/Redis', redisName)
    groupIds: ['redisCache']
  }
}

// Reference the network interface associated with the private endpoint
module redisNetworkInterface 'modules/networkInterfaceExisting.bicep' = if (isRedis) {
  name: 'redisNetworkInterfaceDeployment'
  params: {
    privateEndpointNetworkInterfaceId: redisPrivateEndpoint.outputs.privateEndpointNetworkInterfaceId
    rgName: rgName
  }
  scope: resourceGroup(rgName)
}
// Redis DNS records
module redisDnsRecord 'modules/privateDnsRecord.bicep' = if (isRedis) {
  name: 'redisDnsRecordDeployment'
  params: {
    zoneName: redisPrivateDnsZoneName
    staticIp: redisNetworkInterface.outputs.privateIp
  }
  scope: resourceGroup(rgName)
}

// *** End of Redis Private Zone and Endpoint Deployment

// Public IP Deployment
resource publicIp 'Microsoft.Network/publicIPAddresses@2021-03-01' = {
  name: pipName
  location: location
  sku: pipSku
  properties: {
    publicIPAllocationMethod: 'Static' // You can use 'Dynamic' as well, but Static is recommended
  }
  tags: commonTags
}

// WAF Policy Deployment
resource wafPolicy 'Microsoft.Network/applicationGatewayWebApplicationFirewallPolicies@2023-11-01' = if (isWAF) {
  name: wafPolicyName
  location: location
  properties: {
    customRules: []
    managedRules: {
      managedRuleSets: [
        {
          ruleSetType: 'OWASP'
          ruleSetVersion: '3.2'
        }
      ]
    }
  }
  tags: commonTags
}

// Application Gateway Deployment
module appGateway 'modules/appGateway.bicep' = {
  name: 'appGatewayDeployment'
  params: {
    agwName: agwName
    agwSku: agwSku
    location: location
    publicIpId: publicIp.id
    vnetName: infraVNetName
    agwSubnetName: agwSubnetName
    backendAppFqdn: containerApp.outputs.containerAppFQDN
    wafPolicyId: isWAF ? wafPolicy.id : ''
    commonTags: tags
    enableWaf: isWAF
  }
}

// Static Web App Deployment
module staticWebApp 'modules/staticWebApp.bicep' = {
  name: 'staticWebAppDeployment'
  params: {
    location: swaLocation
    staticWebAppName: staticWebAppName
    staticWebSku: staticWebSku
    commonTags: tags
  }
}

// ------------------
//    OUTPUTS
// ------------------
output containerAppFQDN string = containerApp.outputs.containerAppFQDN
output publicIp string = publicIp.properties.ipAddress
output staticWebAppUrl string = staticWebApp.outputs.defaultHostname
